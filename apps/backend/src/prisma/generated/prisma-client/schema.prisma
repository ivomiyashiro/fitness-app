generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model TrainingPlan {
  trainingPlanId String   @id @default(uuid())
  name           String   @unique @db.VarChar(50)
  description    String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  trainingPlanWeeks TrainingPlanWeek[]
}

model TrainingPlanWeek {
  trainingPlanWeekId String   @id @default(uuid())
  trainingPlanId     String
  weekNumber         Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  trainingPlan TrainingPlan @relation(fields: [trainingPlanId], references: [trainingPlanId], onDelete: Cascade)
  workouts     Workout[]
}

model Workout {
  workoutId          String   @id @default(uuid())
  trainingPlanWeekId String
  name               String   @unique @db.VarChar(50)
  order              Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  trainingPlanWeek TrainingPlanWeek  @relation(fields: [trainingPlanWeekId], references: [trainingPlanWeekId], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
}

model WorkoutExercise {
  workoutExerciseId String   @id @default(uuid())
  workoutId         String
  exerciseId        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  workout  Workout  @relation(fields: [workoutId], references: [workoutId], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)
}

model Exercise {
  exerciseId String   @id @default(uuid())
  name       String   @unique @db.VarChar(50)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  workoutExercises WorkoutExercise[]
}
